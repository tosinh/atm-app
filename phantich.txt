Phân tích các class MVC trong ATM.java.
- class Account gồm những hành phần accountID, password, money, name, Account(), checkLogin,.... được coi như model dùng đẻ quản lý dữ liệu và logic liên quan đến tài khoản ngân hàng nó không trực tiếp giao tiếp với người dùng, nó cung cấp dữ liệu và logic thông qua các phương thức (getter, setter, checkLogin).
- class ATM Khởi động ứng dụng và gọi giao diện (View) ở đây nó chỉ gọi View chứ không giao tiếp với Controller và Model.
- class Controller có vai trò kết nối và điều phối giữa View và Model và xử lý logic nghiệp vụ dựa trên dữ liệu từ Model và yêu cầu từ View
ở đây sài phương thức check(int accountID, String password).Gọi Model.getAccount() để lấy tài khoản mẫu. Dùng Account.checkLogin() để kiểm tra thông tin đăng nhập để trả về kết quả cho view. Hoạt đông Controller là gọi Model để lấy dữ liệu tài khoản và kiểm tra logic.
- class Model cũng cấp một tài khoản mẫu có chức năng quản lý và cung cấp dữ liệu mà ở đây chỉ cung cấp 1 dữ liệu mẫu bằng cách tạo 1 đối tượng Account và sài phương thức getAccount() cung cấp dữ liệu cho Controller lấy thông tin tài khoản.
- class View Hiển thị giao diện dòng lệnh để người dùng đăng nhập. Nhận dữ liệu đầu vào từ người dùng (ID và mật khẩu). Tương tác với COntroller bằng cách gửi thông tin nhập từ người dùng đến Controller qua Controller.check() chứ không giao tiếp trực tiếp với MOdel. Gọi Controller.check() để kiểm tra thông tin đăng nhập. Hiện thị kết quả sau khi check là "Login success!" or "Login failed!".

Review và phân tích các bài TH Docker trên.
- TH3 (goal): ở bài thực hành ta tìm hiểu các công cụ DevOps(Code, tích hợp, triển khai, giám sát), tự động hóa trong DevOps, Chuyên viên DevOps và điểu quan trọng nhất là Lương, Đường ống (pipeline) trong DevOps, ...
Còn về bào thực hành ta có dự án mẫu goal.zip. Do mới là buổi TH3 nên nó khá dể dàng ta chỉ cần làm thành thạo 1 số lệnh cơ bản và mày mò thêm những dòng lệnh mà thầy chưa hướng dẫn, dể để ta có hứng thú động lực để tìm hiểu nhiều hơn.
Ở đây ta Tạo image và container, Xử lý container, Kiểm tra dữ liệu cấu trúc file thầy cho sẳn nên tả chỉ cần tạo và chạy theo ý của của ta, nó khác biệt 1 ít với thầy là ta mày mò hơn nó thường đi kèm với có cờ -f và --name(- và --). Một số lệnh cơ bản trong bài là docker build, run, stop, start, ps, images, log,...

- TH6 (feedback): ta được tìm hiểu về data & volumes, data trong container được lưu trữ như nào, volume trong host gồm 3 loại chính: Anonymous volume, Named volume đều được (Docker tạo và quản lý), Bind mount (developer quản lý), kết nối container và volume, volume được tạo khi ta sử dụng lệnh docker run 
Data trong Container là dữ liệu được lưu trực tiếp bên trong filesystem của container nó không tồn tại bên ngoài container. Nó đơn giản, không cần cấu hình gì thêm nhưng khi container bị xóa thì dữ liệu sẻ bị mất, không thể chia sẻ dữ liệu giữa các container nó chỉ tồn tại tạm thời trong thời gian container hoạt động để tối ưu hơn ta sẻ dùng volumes.
Volumes là cách lưu trữ dữ liệu bền vững trong Docker và 2 cái được lưu trên docker là: Anonymous Volumes và Named Volumes
Anonymous Volumes được tạo và quản lý bởi docker khi container được khởi chạy, tên volume thường là một chuỗi hash ngẫu nhiên. Vì là volume tách biệt nên dữ liệu không bị mất khi container bị xóa, khó nhận biết vì tên volume không rõ ràng, sài khi lưu trữ bền vững nhưng không cần chia sẻ hoặc quản lý thủ công.
Named Volumes được đặt tên rõ ràng hơn Anonymous Volumes nó sẻ dể quản lý, có thể được chia sẻ giữa nhiều container. Dữ liệu tồn tại ngay cả khi không có container nào sử dụng. Nó phụ thuộc vào docker để tạo và quản lý, lưu dữ liệu bền vững, có thể chia sẻ và cần quản lý tốt.
Bind Mounts sử dụng một thư mục cụ thể trên host làm nơi lưu trữ dữ liệu, gắn thư mục này vào một thư mục cụ thể trong container. Truy cập trực tiếp từ host, thuận tiện cho phát triển và kiểm tra. Phụ thuộc vào cấu trúc file trên host do không được quản lý bởi docker đồng bộ hóa dữ liệu giữa host và container trong thời gian thực.
Ta thực tập với project feedback ta khởi động dự án bằng  những  lệnh docker build, run nhưng ở đây trong lệnh docker run ta thêm -v để chạy docker với các volume ta cấu trúc feedback:/app/feedback thì ta sẻ chạy với Name Volumes, kiểm tra danh sách  volume ta chạy lệnh docker volume ls ta sẻ chạy vào tạo thử với Bind Mounts ta chỉ tới thư mục ta cần lưu lại dữ liệu, Anonymous Volumes được tự đọng docker tạo ra khi container được chạy khi ta không gán tên hay mount cụ thể. docker volume inspect feedback ví dụ để xem chi tiết volume feedback hơn ta có thể thay thế feedback bằng các tên khác được tạo ra bởi những volume khác để hiểu hơn về nó.
Thực hành ta sẻ được bắt tay làm những thứ như bài thực nghiệm nhưng nó sẻ được làm theo yêu cầu nhiều hơn được thầy nhắc trên lớp và mày mò thêm được được điểm cao hơn.
TH7 (network): ta học về networking, các loại kết nối network trong container: Kết nối Internet, Kết nối local host, Kết nối container khác khi kết nối ta sài lệnh --network và cách Docker dùng port trong network
Ta thực hành với project network khởi động bàng cách tìm hiểu sơ qua cách sử dụng  HTTP (sài Postman) và DB (sài mongoDB). Cất data vào mongoDB. Ta học cách Container kết nối với www, kết nối host, kết nối container khác.
Thông qua MongoDB mongodb://127.0.0.1:27017/ để kết nối www 
Thông qua MongoDB mongodb://host.docker.internal:27017/  để kết nối host
Thông qua MongoDB mongodb://172.17.0.2:27017/ kết nối container khác bằng cách thay đổi IP port 
Ta thực hành với project network Truy cập VN Public APIs và Download các thông tin xã, phường, quận Trình bày thông tin trên giao diện (html form) chèn vào control file app.js.
Từng bước làm ta vào postman kéo api về và down xống thành 3 file json thông tin xã, pường, quận việt nam
Kết nối với mongodb ta có thể đẩy dữ liệu file json lên database đã tạo thông qua import file json hoặc bằng code. Nhưng trước hết ta phải tạo database trên dự. 
Triển khai lên dockerhub thì ta phải docker pull mongo:latest để có mongo kết nối mà chạy nữa buid dự  và chạy đồng thồi mongo với dự án network để kiểm tra khi ta nhập từ from ra thì nó đã kết nối database và lấy dự liệu hiện ra oke không.
- 'client-server': là bài thực hành cuối trong môn học docker rồi nên ta sẻ xử lý nhanh hơn bàng cách triển khai docker-compose ở trong ta cấu hình  tất cả những gì ta muốn docker nó build lên là gì từ run port bao nhiêu, volume, network, image, container,... do nó gộp thành 1 file nó dể quản lý bao quát hơn nhưng ta vẩn phải có Dockerfile cho mục lớn frotend, backend để ta có thể triển khaichi tiết hơn cho mục đó nhưng khi sài docker-compose ta lại không nên đẩy hên dockerhub thành 1 file có frontend, backend, database vì nó không hợp lý cho lắm theo tôi tìm hiểu ra vậy nên khi lên dockerhub vẩn phải tách ra để push lên hoặc có thể nhe nhàng hơn là docker-compose push thì ta phải dảm bảo trong file docker-compose phải có cấu hình image cho từng file.
Và khởi độngg là build ta chạy docker-compose up --build muốn dùng thì docker-compose down có 2 lện cơ bản như up vaà down. CÒn --build nếu ta muốn build lại hoặc lần đầu build. Khi down thì tất cả container nó bị xóa theo. Tìm lỗi thì mở log ra.